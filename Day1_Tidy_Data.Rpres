Tidy data tutorial - Day 1
========================================================
author: Keith H. Turner (Twitter: @kay_aych)
date: Thursday, May 11, 2017
css: tutorial.css


Tidy data
========================================================
Paradigm for __exploratory data analysis__ defined primarily by Hadley Wickham

![](http://r4ds.had.co.nz/diagrams/data-science.png)

Outline for the next few days
========================================================
* Day 1: Tidy data
  + Importing your data into R
  + Tidying your data
  + Transforming your tidy data
* Day 2: `ggplot` and modeling
  + Visualizing your tidy data
  + Incorporating basic modeling into your tidy workflow

These tutorials are largely based on the book *R for Data Science*, which is also available for free online at [`https://r4ds.had.co.nz`](https://r4ds.had.co.nz)

What is tidy data?
========================================================
class: small-code
* A paradigm for storing your data in a consistently structured form
* Generally, each row is an *observation*, and each column is a *variable*

```{r}
head(iris)
```

Why tidy?
========================================================
class: small-code
- Standardized framework allows your data to fit nicely into the APIs provided by base R and other key packages

```{r}
lm(mpg ~ disp + wt + hp + cyl + drat, data = mtcars)
```

The tidyverse
========================================================
class: small-code

- [The tidyverse](http://tidyverse.org/) is a meta-package of common tidy data packages maintained by [Hadley Wickham](http://hadley.nz/), Chief Scientist at RStudio
  * Run `install.packages("tidyverse")` in your R/RStudio environment of choice

```{r, echo=TRUE, error=TRUE, warning=TRUE, message=TRUE}
## Run me!
library(tidyverse)
```

The tibble - the central tidyverse object
========================================================
class: small-code

<img style="float: right;" src="http://tibble.tidyverse.org/logo.png">

- Wrapper of tabular data
  * data frames (can include complex columns!)
  * `SQL` tables
- From the `tibble` documentation:

```
tibble is a trimmed down version of data.frame that:
 - Never coerces inputs (i.e. strings stay as strings!).
 - Never adds row.names.
 - Never munges column names.
 - Only recycles length 1 inputs.
 - Evaluates its arguments lazily and in order.
 - Adds tbl_df class to output.
 - Automatically adds column names.
```

Create a tibble de novo
========================================================
class: small-code

```{r}
tibble(treatment = sample(letters, 10),
       expression_value = rnorm(10, 100, 10))
```
 - Never coerces inputs (i.e. strings stay as strings!).
   * Remember to coerce to factor if you need it (i.e. for modeling)
 - Adds tbl_df class to output.
   *  Pretty printing!

Examining data frames in base R is cumbersome
========================================================
class: small-code

```{r}
dim(iris)
str(iris)
iris
```

Coerce a data frame to a tibble, now it's pretty!
========================================================
class: small-code

```{r}
tibble_iris <- tbl_df(iris)
tibble_iris
```

 - Note that column types are *maintained* when coercing an already-typed object like a data frame

Outline
========================================================
* Day 1: Tidy data
  + **Importing your data into R**
  + Tidying your data
  + Transforming your tidy data

readr - read tabular data in as a tibble
========================================================
class: small-code

<img style="float: right;" src="http://readr.tidyverse.org/logo.png">

- Main functions are `read_*`
  * `csv`, `tsv`, `delim`, `fwf`, etc.
- Faster than `read.*`, but not `data.table::fread`
- Nice column parsers, reads data as a tibble

```{r}
read_csv("https://query.data.world/s/v8bzksoqgqyinhqd4u6lhruu") # file or URL
```

readr - read tabular data in as a tibble
========================================================
class: small-code

- Can also take raw text

```{r}
read_csv("date,restaurant,num_visitors
         2017-04-01,Yaya's Euro Bistro,100
         2017-04-02,Elaia,50")
```

- *Useful for streaming data files from S3*

```{r, eval = F}
library(aws.s3)
df <- read_csv(rawToChar(get_object("kturn1/POC.sourcing.metadata.csv",
                                    bucket = "genome-analytics-scratch-space")))
```

Messy data with readr
========================================================
class: small-code

- Skip a few lines

```{r}
read_csv("The first line of metadata
  The second line of metadata
  x,y,z
  1,2,3", skip = 2)
```

- Comments

```{r}
read_csv("# A comment I want to skip
  x,y,z
  1,2,3", comment = "#")
```

Column names and types
========================================================

- Names guessed from first line if `col_names = TRUE` (default)
  - Otherwise, `col_names = c("Var1", "Var2")`
- Types guessed from first 1,000 lines of your code
  - See `vignette("column-types")` for more details.
  - Or you can specify, one letter per column: `col_types = "ciddlD"`

Putting it all together - GFF file
========================================================
class: small-code

- `readr` functions can handle gzipped files

```{r}
sg <- read_tsv("https://ftp.ncbi.nlm.nih.gov/genomes/refseq/bacteria/Streptococcus_gordonii/latest_assembly_versions/GCF_002073435.1_ASM207343v1/GCF_002073435.1_ASM207343v1_genomic.gff.gz",
               comment = "#",
               col_names = c("seqname", "source", "feature", "start", "end", "score", "strand", "frame", "attribute"))
sg
```

readxl - similar functionality for Excel files
========================================================
class: small-code

<img style="float: right;" src="http://readxl.tidyverse.org/logo.png">

- Work in progress to make it more similar to `readr`
  - Currently can't work on text streams, URLs
<br>
<br>

```{r, warning = T, error = T, message = T}
## Run me!
library(readxl)
eurovision <- read_excel("data/eurovision_song_contest_1975_2016.xlsx")
eurovision
```

Data import exercise 1
========================================================
class: small-code

- Goal: read in a CSV of flights to/from New York City in 2013
  - File location: `data/flights.csv`

<iframe src="//giphy.com/embed/o5oLImoQgGsKY" width="480" height="264" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

Data import exercise 1
========================================================
class: small-code

- Goal: read in a CSV of flights to/from New York City in 2013
  - File location: `data/flights.csv`

```{r}
## Run me!
library(tidyverse)
flights <- read_csv("data/flights.csv")
flights
```

Outline
========================================================
* Day 1: Tidy data
  + Importing your data into R
  + **Tidying your data**
  + Transforming your tidy data

Digression - piping
========================================================

<img style="float: right;" src="https://d21ii91i3y6o6h.cloudfront.net/gallery_images/from_proof/3632/small/1419844831/magrittr.png">

* The `%>%` operator, from the `magrittr` package
* *Very* useful in linear tidy data workflows
* Most simply, `x %>% f(y)` means `f(x,y)`
  * **Tip**: Read it like "then"
* Let's illustrate with an example:

```
Little bunny Foo Foo
Went hopping through the forest
Scooping up the field mice
And bopping them on the head
```

Digression - piping
========================================================
class: small-code

* Without the pipe, this is hard to program cleanly

```{r, eval = F}
# Every intermediate as a new object
foo_foo <- little_bunny()
foo_foo_1 <- hop(foo_foo, through = forest)
foo_foo_2 <- scoop(foo_foo_1, up = field_mice)
foo_foo_3 <- bop(foo_foo_2, on = head)

# Overwrite the original object
foo_foo <- hop(foo_foo, through = forest)
foo_foo <- scoop(foo_foo, up = field_mice)
foo_foo <- bop(foo_foo, on = head)

# Nested function calls
bop(
  scoop(
    hop(foo_foo, through = forest),
    up = field_mice
  ), 
  on = head
)
```

Digression - piping
========================================================

* With the pipe, process flows logically
* Legible, understandable code

```{r, eval = F}
foo_foo %>%
  hop(through = forest) %>%
  scoop(up = field_mouse) %>%
  bop(on = head)
```

* Focus is on verbs, not nouns
  * Hop through forest, **then** scoop up field mouse, **then** bop on head

Tidy data
========================================================
There are three interrelated rules which make a dataset tidy:

1. Each variable must have its own column.
2. Each observation must have its own row.
3. Each value must have its own cell.

![](http://r4ds.had.co.nz/images/tidy-1.png)

Most data comes to you untidy
========================================================
class: small-code

```{r, echo = F}
cases <- tibble(country = c("Afghanistan", "Brazil", "China"),
       `1999` = c(745, 37737, 212258),
       `2000` = c(2666, 80488, 213766))
```

```{r}
cases
```

In this example, `1999` and `2000` represent the number of cases in two years in these three countries

Most common operations in tidying data
========================================================

<img style="float: right;" src="http://tidyr.tidyverse.org/logo.png">

The `tidyr` package handles two common
issues in tidying data:

1. **One variable might be spread across multiple columns.**
2. One observation might be scattered across multiple rows.

Gathering
========================================================
class: small-code

* Use when column names are not names of variables, but *values* of a variable
  * Like `melt`, but more limited use case

```{r}
cases %>% gather(`1999`, `2000`, key = "year", value = "cases")
```

Most common operations in tidying data
========================================================

<img style="float: right;" src="http://tidyr.tidyverse.org/logo.png">

The `tidyr` package handles two common
issues in tidying data:

1. One variable might be spread across multiple columns.
2. **One observation might be scattered across multiple rows.**

Spreading
========================================================
class: small-code

* Opposite of gathering, use when one observation is spread across multiple rows
  * Like `cast`, but more limited use case

```{r, echo = F}
to_spread <- expand.grid(country = c("Afghanistan", "Brazil", "China"),
                         year = c(1999, 2000),
                         type = c("cases", "population"), stringsAsFactors = F) %>% tbl_df
to_spread$count <- c(745, 19987071, 2666, 20595360, 37737, 172006362,
                     80488, 174504898, 212258, 1272915272, 213766, 1280428583)
```

```{r}
to_spread
```

Spreading
========================================================
class: small-code

* Opposite of gathering, use when one observation is spread across multiple rows
  * Like `cast`, but more limited use case
  
```{r}
to_spread %>% spread(key = type, value = count)
```

Separating
========================================================
class: small-code

* Multiple values in a single column

```{r, echo = F}
rate_as_char <- expand.grid(country = c("Afghanistan", "Brazil", "China"),
                         year = c(1999, 2000),
                         stringsAsFactors = F) %>% tbl_df
rate_as_char$rate <-
  c("745/19987071", "2666/20595360", "37737/172006362",
    "80488/174504898", "212258/1272915272", "213766/1280428583")
```

```{r}
rate_as_char
rate_as_char %>% separate(rate, into = c("cases", "population"))
```

Separating - default behavior
========================================================
class: small-code

* By default, splits on non-alphanumeric characters

```{r}
rate_as_char %>% separate(rate, into = c("cases", "population"), sep = "/") # Regex
```

Separating - default behavior
========================================================
class: small-code

* And does not convert new columns

```{r}
rate_as_char %>% separate(rate, into = c("cases", "population"), convert = T)
```

CASE STUDY: WHO Global TB Report
========================================================
class: small-code

* Tuberculosis (TB) cases broken down by year, country, age, gender, and diagnosis method

```{r}
who
```

CASE STUDY: WHO Global TB Report
========================================================
class: small-code

```
# Column names description
1. The first three letters of each column denote whether the column contains new or old cases of TB. In this dataset, each column contains new cases.
2. The next two letters describe the type of TB:
  - rel stands for cases of relapse
  - ep stands for cases of extrapulmonary TB
  - sn stands for cases of pulmonary TB that could not be diagnosed by a pulmonary smear (smear negative)
  - sp stands for cases of pulmonary TB that could be diagnosed be a pulmonary smear (smear positive)
3. The sixth letter gives the sex of TB patients. The dataset groups cases by males (m) and females (f).
4. The remaining numbers gives the age group. The dataset groups cases into seven age groups:
  - 014 = 0 – 14 years old
  - 1524 = 15 – 24 years old
  - 2534 = 25 – 34 years old
  - 3544 = 35 – 44 years old
  - 4554 = 45 – 54 years old
  - 5564 = 55 – 64 years old
  - 65 = 65 or older
```

```{r}
colnames(who)
```

CASE STUDY: WHO Global TB Report
========================================================
class: small-code

* Step 1: **Gather** non-variable columns

```{r}
who
```

CASE STUDY: WHO Global TB Report
========================================================
class: small-code

* Step 1: **Gather** non-variable columns

```{r}
who1 <- who %>%
  gather(new_sp_m014:newrel_f65, key = "key", value = "cases", na.rm = T)
who1
unique(who1$key)
```

CASE STUDY: WHO Global TB Report
========================================================
class: small-code

* Step 2: Decode the key...

```{r}
# Quick fix: "new_rel" instead of "newrel" - see `stringr` package for documentation on str_replace
#   And we'll discuss mutate from dplyr in the next section
who2 <- who1 %>% mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who3 <- who2 %>% separate(key, c("new", "type", "sexage"))
who3
```

CASE STUDY: WHO Global TB Report
========================================================
class: small-code

* Step 2.5: Remove boring columns
  * `new` is uninformative (they're all "new"")
  * `iso2` and `iso3` are redundant

```{r}
who4 <- who3 %>% select(-new, -iso2, -iso3) # `select` from dplyr, which we'll discuss later
who4
```

CASE STUDY: WHO Global TB Report
========================================================
class: small-code

* Step 3: Separate `sex` and `age` from `sexage`

```{r}
unique(who4$sexage)
who5 <- who4 %>% separate(sexage, c("sex", "age"), sep = 1) # You can specify a position for separate instead of a regex
```

CASE STUDY: WHO Global TB Report
========================================================
class:small-code

### Tidy!

```{r}
who5
```

<iframe src="//giphy.com/embed/3o7TKqTOqevMiJAwU0" width="240" height="240" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

CASE STUDY: WHO Global TB Report
========================================================
class:small-code

Now we can do all the great things we wanted to with tidy data

```{r, eval = F}
# Summarize it - Next section
# Which country has the most cases in each decade?
who5 %>% mutate(decade = cut(year, breaks = c(1980, 1990, 2000, 2010, Inf),
                             labels = c("80s", "90s", "00s", "10s"),
                             right = F)) %>%
  filter(sex == "f", age == "014") %>%
  group_by(decade, country) %>%
  summarize(cases = sum(cases)) %>% filter(cases == max(cases))

# Plot it - Tomorrow
who5 %>%
  ggplot(aes(year, cases, color = sex, alpha = age)) +
  geom_line() +
  facet_wrap(~country, scales = "free")

# Model it - Tomorrow
tb_model <- lm(cases ~ country + year + type + sex + age, data = who5)
```

CASE STUDY: WHO Global TB Report
========================================================
class:small-code

Bonus - tidy it all in one piped operation

```{r}
tidy_who <- who %>%
  gather(code, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>% 
  mutate(code = stringr::str_replace(code, "newrel", "new_rel")) %>%
  separate(code, c("new", "var", "sexage")) %>% 
  select(-new, -iso2, -iso3) %>% 
  separate(sexage, c("sex", "age"), sep = 1)
tidy_who
```

Outline
========================================================
* Day 1: Tidy data
  + Importing your data into R
  + Tidying your data
  + **Transforming your tidy data**

dplyr - data transformation toolbox
========================================================

<img style="float: right;" src="http://dplyr.tidyverse.org/logo.png">

## A grammar of data manipulation

* Consistent set of verbs for common operations:
  + `filter()` picks cases based on their values.
  + `arrange()` changes the ordering of the rows.
  + `select()` picks variables based on their names.
  + `mutate()` adds new variables that are functions of existing variables
  + `summarize()` reduces multiple values down to a single summary.
* All of these can be combined with `group_by()` to perform any operation "by group"

New York City flights - 2013
========================================================
class:small-code

* From the `nycflights13` package

```{r}
flights
```

filter - pick observations based on values
========================================================
class:small-code

* Columns are referred to in expressions that filter rows out of the data frame
  * Separate arguments to `filter` are combined like `&`

```{r}
flights %>% filter(month == 5, day == 11)
```

filter - pick observations based on values
========================================================
class:small-code

* Anything that evaluates to a boolean value can be used in a `filter` statement

```{r}
flights %>%
  filter(sched_dep_time < 1200,
         origin %in% c("JFK", "EWR"),
         !is.na(dep_time))
```

filter - pick observations based on values
========================================================
class:small-code

* Boolean combinations can be used too

```{r}
flights %>%
  filter((air_time < 120 & dep_delay > 30) |
           (air_time >= 120 & dep_delay > 60))
```

filter - pick observations based on values
========================================================
class:small-code

* Watchout: only returns rows that evaluate to `TRUE`, **not** `NA`
  * Usually what you want anyway, but it's worth checking in on your data frame from time to time

```{r}
flights %>% filter(dep_time < 1200) %>% nrow
flights %>% filter(dep_time < 1200 | is.na(dep_time)) %>% nrow
```

arrange - sort rows by values
========================================================
class:small-code

* Sort by values in specified columns
  * Leftmost column is the primary sorting key, subsequent columns break ties

```{r}
flights %>% arrange(year, month, day)
```

arrange - sort rows by values
========================================================
class:small-code

* Reverse order of a column with `desc`

```{r}
flights %>% arrange(desc(dep_delay))
```

arrange - sort rows by values
========================================================
class:small-code

* `NA` values always go to end

```{r}
flights %>% arrange(dep_delay) %>% tail
```

select - remove, reorder, or rename columns
========================================================
class:small-code

* Specify columns by name

```{r}
flights %>% select(year, month, day, dep_delay)
```

select - remove, reorder, or rename columns
========================================================
class:small-code

* Remove columns with "`-`"

```{r}
flights %>% select(-sched_dep_time, -sched_arr_time)
```

select - remove, reorder, or rename columns
========================================================
class:small-code

* Range of columns with "`:`"

```{r}
flights %>% select(carrier:tailnum)
```

select - remove, reorder, or rename columns
========================================================
class:small-code

* Helper functions for `select`
  + `starts_with("abc")`: matches names that begin with “abc”.
  + `ends_with("xyz")`: matches names that end with “xyz”.
  + `contains("ijk")`: matches names that contain “ijk”.
  + `matches("(.)\\1")`: selects variables that match a regex.
  + `num_range("x", 1:3)`: matches x1, x2 and x3.

```{r}
flights %>% select(-starts_with("sched"))
```

select - remove, reorder, or rename columns
========================================================
class:small-code

```{r}
flights %>% select(year, month, day, tail_number = tailnum)
```

select - remove, reorder, or rename columns
========================================================
class:small-code

* Other tricks:
  * `rename()`: like `select()` but keeps all variables not mentioned
  * `everything()`: shortcut for "all other columns"

```{r, eval = F}
flights %>% rename(tail_number = tailnum)
flights %>% select(carrier, dep_delay, arr_delay, everything())
```

mutate - calculate new columns from existing ones
========================================================
class:small-code

* Use any arithmetic operations: `+`, `-`, `/`, `*`

```{r}
flights %>% select(distance, air_time) %>%
  mutate(speed = distance / air_time * 60)
```

mutate - calculate new columns from existing ones
========================================================
class:small-code

* Other useful operations:
  + Modular arithmetic: `%/%`, `%%`
  + Logarithmic functions: `log`, `log10`, `log2`, `log1p`

```{r}
flights %>% select(sched_dep_time, distance) %>%
  transmute(sched_dep_hour = sched_dep_time %/% 100, # transmute drops other columns
            sched_dep_minute = sched_dep_time %% 100,
            log_distance = log10(distance))
```

mutate - calculate new columns from existing ones
========================================================
class:small-code

* Other useful operations:
  + Offset functions: `lead`, `lag`

```{r}
flights %>% filter(origin == "JFK", !is.na(dep_time)) %>%
  select(year, month, day, dep_time) %>% 
  arrange(year, month, day, dep_time) %>%
  mutate(min_from_last_flight = dep_time - lag(dep_time))
```

mutate - calculate new columns from existing ones
========================================================
class:small-code

* Other useful operations:
  + Cumulative functions: `cumsum`, `cummean`, `cumprod`, etc.

```{r}
flights %>% filter(carrier == "UA", !is.na(dep_delay)) %>%
  select(year, month, day, sched_dep_time, dep_delay) %>% 
  arrange(year, month, day, sched_dep_time) %>%
  mutate(dep_delay_to_date = cumsum(dep_delay)) %>% tail
```

summarize - collapse data frame to a single row
========================================================
class:small-code

```{r}
flights %>%
  summarize(mean_delay = mean(dep_delay, na.rm = T),
            num_flights = n()) # n() is a special function, basically "length"
```

* Pretty boring, right?

group_by - subdivide data frame
========================================================
class:small-code

* Makes `summarize` *much* more useful

```{r}
flights %>%
  group_by(carrier) %>% 
  summarize(mean_delay = mean(dep_delay, na.rm = T)) %>%
  arrange(desc(mean_delay))
```

group_by - subdivide data frame
========================================================
class:small-code

* Can group by multiple columns
  * Each `summarize` "peels off" rightmost column

```{r}
flights %>%
  group_by(year, month, day) %>%
  tally # means "summarize(n = n())"
```

group_by - subdivide data frame
========================================================
class:small-code

* Can group by multiple columns
  * Each `summarize` "peels off" rightmost column

```{r}
flights %>%
  group_by(year, month, day) %>%
  tally %>% tally # will sum "n" column
```

dplyr - data transformation toolbox
========================================================

* The `dplyr` verbs
  + `filter()` picks cases based on their values.
  + `arrange()` changes the ordering of the rows.
  + `select()` picks variables based on their names.
  + `mutate()` adds new variables that are functions of existing variables
  + `summarize()` reduces multiple values down to a single summary.
  + `group_by()` to perform any operation "by group"
* **This vocabulary allows you to do a lot!**

Not covered - joins
========================================================

* `dplyr` has nice syntax for SQL-style joins
  + `inner_join(df1, df2, by = c("keyA", "keyB1" = "keyB2"))`
  + `left_join()`
  + `right_join()`
  + `full_join()`
  + `anti_join()`

Data transforming exercise 1
========================================================
class: small-code

- Goal: What country gave the highest mean points to Belarus in Eurovision?

```{r}
eurovision
```

<iframe src="//giphy.com/embed/xA1PKCt00IDew" width="240" height="175" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

Data transforming exercise 1
========================================================
class: small-code

- Goal: What country gave the highest mean points to Belarus in Eurovision?

```{r}
mean_points_to_belarus <- eurovision %>%
  filter(to_country == "Belarus") %>%
  group_by(from_country) %>%
  summarize(num_obs = n(), mean_points = mean(points))

mean_points_to_belarus %>% arrange(desc(mean_points))
```

* How does being a former SSR affect Eurovision voting?
  * **Tomorrow!**

Additional Eurovision data exercises
========================================================
class: small-code

* What country has the highest mean score in the finals?
* What country has given the lowest/highest mean vote to any other country in the finals (num years > 20)?
* What country had the steepest decade-on-decade decline in mean score in the finals?
  + Hint: `cut()` splits a continuous variable into interval factors

```{r}
# Data to start from - only finals, no self rows
eurovision_finals_no_self <- eurovision %>%
  filter(competition_round == "f", from_country != to_country)
```

Additional Eurovision data exercises
========================================================
class: small-code

* What country has the highest mean score?

```{r}
eurovision_finals_no_self %>%
  group_by(to_country) %>%
  summarize(mean_points = mean(points), n = n_distinct(year)) %>%
  arrange(desc(mean_points))
```


<iframe src="https://giphy.com/embed/JW5cCdKfoLFG8" width="240" height="180" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

Additional Eurovision data exercises
========================================================
class: small-code

* What country has given the lowest mean vote to any other country (num years > 20)

```{r}
eurovision_finals_no_self %>%
  group_by(from_country, to_country) %>%
  summarize(mean_points = mean(points), n = n_distinct(year)) %>%
  filter(n > 20) %>% 
  arrange(mean_points)
```

Additional Eurovision data exercises
========================================================
class: small-code

* What country had the steepest decade-on-decade decline in mean score in the finals?

```{r}
eurovision_finals_no_self %>%
  group_by(to_country, year) %>%
  summarize(total_points = sum(points)) %>%
  mutate(decade = cut(year, breaks = c(1970, 1980, 1990, 2000, 2010, Inf),
                             labels = c("70s", "80s", "90s", "00s", "10s"),
                             right = F)) %>%
  group_by(to_country, decade) %>%
  summarize(mean_score = mean(total_points)) %>%
  mutate(delta_mean_score = mean_score - lag(mean_score)) %>%
  arrange(delta_mean_score)
```
